class Solution {
    public int binarySearch(int[][] events , int endTime){
          int n = events.length;
          int l = 0;
          int h = n - 1;
          int result = n;
          while(l <= h){
              int mid = l + (h - l)/2;
              if(events[mid][0] > endTime){
                  result = mid;
                  h = mid - 1;
              }
              else
                  l = mid + 1;
          }
          return result;
    }
    public int recur(int[][] events , int i , int count ,int[][] dp){
        int n = events.length;
        if(i >= n || count == 2)
          return 0;

        if(dp[i][count] != -1)
          return dp[i][count];
        int validIndex = binarySearch(events , events[i][1]);
        int take = events[i][2] + recur(events , validIndex , count + 1 , dp);
        int notTake = recur(events , i + 1 , count , dp);

        return dp[i][count] = Math.max(take , notTake);
    }
    public int maxTwoEvents(int[][] events) {
        int n = events.length;
        Arrays.sort(events , (a ,b) -> a[0] - b[0]);
        int dp[][] = new int[n + 1][3];
        for(int arr[] : dp)
           Arrays.fill(arr , -1);
        return recur(events , 0 , 0 , dp);
    }
}
